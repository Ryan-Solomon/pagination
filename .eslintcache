[{"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\index.tsx":"1","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\App.tsx":"2","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\pages\\Users.tsx":"3","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\hooks\\useFetchUsers.tsx":"4","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\components\\FollowerCard.tsx":"5","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\components\\BottomPages.tsx":"6"},{"size":197,"mtime":1611108020990,"results":"7","hashOfConfig":"8"},{"size":181,"mtime":1611193486773,"results":"9","hashOfConfig":"8"},{"size":1350,"mtime":1611274869613,"results":"10","hashOfConfig":"8"},{"size":1034,"mtime":1611193719122,"results":"11","hashOfConfig":"8"},{"size":912,"mtime":1611194907659,"results":"12","hashOfConfig":"8"},{"size":1195,"mtime":1611274867828,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"x8jvmu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\index.tsx",[],["31","32"],"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\App.tsx",[],"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\pages\\Users.tsx",["33"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport BottomPages from '../components/BottomPages';\r\nimport FollowerCard from '../components/FollowerCard';\r\nimport { useFetchUsers } from './../hooks/useFetchUsers';\r\n\r\nexport default function Users() {\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [howManyUsers, setHowManyUsers] = useState(10);\r\n  const { status, users } = useFetchUsers({ howManyUsers, pageNumber });\r\n  if (status === 'loading') return <h1>Loading...</h1>;\r\n  if (status === 'error' || !users) return <h1>Error</h1>;\r\n\r\n  const changePage = (direction: 'PREV' | 'NEXT') => {\r\n    if (direction === 'PREV') {\r\n      setPageNumber(Math.max(0, pageNumber - 1));\r\n    } else if (direction === 'NEXT') {\r\n      setPageNumber(Math.min(10, pageNumber + 1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UsersContainer>\r\n        {users.length > 0 &&\r\n          users.map((user) => {\r\n            return <FollowerCard user={user} key={user.id} />;\r\n          })}\r\n      </UsersContainer>\r\n      <BottomPages\r\n        setPageNumber={setPageNumber}\r\n        changePage={changePage}\r\n        pageCount={10}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst UsersContainer = styled.main`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 2rem;\r\n  padding: 2rem;\r\n`;\r\n","C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\hooks\\useFetchUsers.tsx",["34"],"import React, { FC } from 'react';\r\nimport { TUser } from '../types/types';\r\n\r\ntype TProps = {\r\n  pageNumber: number;\r\n  howManyUsers: number;\r\n};\r\n\r\ntype TStatus = 'loading' | 'fulfilled' | 'error';\r\n\r\nexport const useFetchUsers = ({ howManyUsers, pageNumber }: TProps) => {\r\n  const [users, setUsers] = React.useState<TUser[] | null>(null);\r\n  const [status, setStatus] = React.useState<TStatus>('loading');\r\n\r\n  React.useEffect(() => {\r\n    const getUsers = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `https://api.github.com/users/john-smilga/followers?page=${pageNumber}&per_page=${howManyUsers}`\r\n        );\r\n        if (res.status !== 200) {\r\n          throw new Error('Non-200 status code');\r\n        }\r\n        const data = await res.json();\r\n        setUsers(data);\r\n        setStatus('fulfilled');\r\n      } catch (error) {\r\n        console.warn(error.message);\r\n        setStatus('error');\r\n      }\r\n    };\r\n    getUsers();\r\n  }, [pageNumber, howManyUsers]);\r\n\r\n  return { status, users };\r\n};\r\n",["35","36"],"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\components\\FollowerCard.tsx",[],"C:\\Users\\Ryan\\documents\\react-practice\\pagination\\src\\components\\BottomPages.tsx",["37"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype TProps = {\r\n  pageCount: number;\r\n  changePage: (direction: 'PREV' | 'NEXT') => void;\r\n  setPageNumber: (num: number) => void;\r\n};\r\n\r\nexport default function BottomPages({\r\n  pageCount,\r\n  changePage,\r\n  setPageNumber,\r\n}: TProps) {\r\n  const [pagesArray, setPagesArray] = useState(\r\n    new Array(pageCount).fill(null).map((_, idx) => idx + 1)\r\n  );\r\n  console.log(pagesArray);\r\n  return (\r\n    <PagesContainer>\r\n      <Button onClick={() => changePage('PREV')}>Prev</Button>\r\n      {pagesArray.map((v, idx) => {\r\n        return (\r\n          <PageSelector onClick={() => setPageNumber(v)} key={v + idx}>\r\n            {v}\r\n          </PageSelector>\r\n        );\r\n      })}\r\n      <Button onClick={() => changePage('NEXT')}>Next</Button>\r\n    </PagesContainer>\r\n  );\r\n}\r\n\r\nconst PagesContainer = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  list-style: none;\r\n  width: 100%;\r\n`;\r\n\r\nconst PageSelector = styled.li`\r\n  background: #444;\r\n  margin: 0 10px;\r\n  padding: 1rem;\r\n  font-size: 1.5rem;\r\n  color: white;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":9,"column":24,"nodeType":"44","messageId":"45","endLine":9,"endColumn":39},{"ruleId":"42","severity":1,"message":"46","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":19},{"ruleId":"38","replacedBy":"47"},{"ruleId":"40","replacedBy":"48"},{"ruleId":"42","severity":1,"message":"49","line":15,"column":22,"nodeType":"44","messageId":"45","endLine":15,"endColumn":35},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'setHowManyUsers' is assigned a value but never used.","Identifier","unusedVar","'FC' is defined but never used.",["50"],["51"],"'setPagesArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]